{"version":3,"sources":["components/screens/Start/Start.js","components/utility/Button/styles.js","components/utility/Button/Button.js","components/utility/Score/Score.js","components/utility/Stop/Stop.js","logic/helpers.js","logic/redux/actions/game.js","components/screens/Game/styles.js","components/screens/Game/Game.js","logic/redux/reducers/gameReducer.js","logic/redux/reducers/index.js","logic/redux/index.js","history.js","App.js","reportWebVitals.js","index.js"],"names":["Start","highscore","useSelector","state","gameReducer","location","useLocation","history","useHistory","onClick","push","undefined","lastScore","wrapper","height","width","margin","Button","color","active","pressed","style","backgroundColor","Score","points","Stop","goBack","sleep","ms","Promise","resolve","setTimeout","updateArray","array","newItem","atIndex","map","item","index","UPDATE_HIGHSCORE","buttons","display","justifyContent","alignItems","center","textAlign","Game","dispatch","useDispatch","useState","gameStarted","setGameStarted","colors","setColors","rounds","setRounds","delay","setDelay","correctAnswer","setCorrectAnswer","userAnswer","setUserAnswer","allowPress","setAllowPress","setPoints","handleGameEnding","msg","console","log","type","data","updateHighscore","replace","pathname","useEffect","a","asyncWrap","timer","clearTimeout","correctAnswers","i","num","Math","floor","random","length","initialState","rootReducer","combineReducers","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","persistor","persistStore","createBrowserHistory","App","loading","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.661a341d.chunk.js","sourcesContent":["// Components\nimport React from \"react\";\n\n// Utility\nimport { useHistory, useLocation } from \"react-router-dom\";\n\n// Redux\nimport { useSelector } from \"react-redux\";\n\nfunction Start() {\n  const { highscore } = useSelector(state => state.gameReducer);\n  const location = useLocation();\n  const history = useHistory();\n\n  return (\n    <div>\n      <h1 onClick={() => history.push(\"/game\")}>Start Game</h1>\n      <h2>Highscore: {highscore}</h2>\n      {location.lastScore !== undefined && (\n        <h2>Last Game Score: {location.lastScore}</h2>\n      )}\n    </div>\n  );\n}\n\nexport default Start;\n","const wrapper = {\n  height: \"10em\",\n  width: \"10em\",\n  margin: \"1em\"\n};\n\nexport { wrapper };\n","// Components\nimport React from \"react\";\n\n// Styles\nimport { wrapper } from \"./styles.js\";\n\nfunction Button({ color, active, pressed, onClick }) {\n  return (\n    <div\n      onClick={onClick}\n      style={{ ...wrapper, backgroundColor: active ? color : \"grey\" }}\n    />\n  );\n}\n\nexport default Button;\n","// Components\nimport React from \"react\";\n\n// Styles\n//import { } from './styles.js';\n\nfunction Score({ points }) {\n  return (\n    <div>\n      <h1>Score: {points}</h1>\n    </div>\n  );\n}\n\nexport default Score;\n","// Components\nimport React from \"react\";\n\n// Utility\nimport { useHistory } from \"react-router-dom\";\n\n// Styles\n//import {} from \"./styles.js\";\n\nfunction Stop() {\n  const history = useHistory();\n\n  return (\n    <div>\n      <h1 onClick={() => history.goBack()}>Stop Game</h1>\n    </div>\n  );\n}\n\nexport default Stop;\n","const sleep = ms => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n\nfunction randomNumber() {\n  return Math.floor(Math.random() * 4);\n}\n\nfunction updateArray(array, newItem, atIndex) {\n  return array.map((item, index) => (index === atIndex ? newItem : item));\n}\n\nexport { sleep, randomNumber, updateArray };\n","export const UPDATE_HIGHSCORE = \"UPDATE_HIGHSCORE\";\n\nexport const updateHighscore = points => {\n  return { type: UPDATE_HIGHSCORE, data: points };\n};\n","const buttons = {\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\"\n};\n\nconst center = {\n  textAlign: \"center\"\n};\n\nexport { buttons, center };\n","// Components\nimport React, { useEffect, useState } from \"react\";\nimport Button from \"../../utility/Button/Button.js\";\nimport Score from \"../../utility/Score/Score.js\";\nimport Stop from \"../../utility/Stop/Stop.js\";\n\n// Utility\nimport { useHistory } from \"react-router-dom\";\nimport { sleep, randomNumber, updateArray } from \"../../../logic/helpers.js\";\n\n// Redux\nimport { useDispatch } from \"react-redux\";\nimport { updateHighscore } from \"../../../logic/redux/actions/game.js\";\n\n// Styles\nimport { buttons, center } from \"./styles.js\";\n\nfunction Game() {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const [gameStarted, setGameStarted] = useState(false);\n  const [colors, setColors] = useState([false, false, false, false]);\n  const [rounds, setRounds] = useState(2);\n  const [delay, setDelay] = useState(1000);\n  const [correctAnswer, setCorrectAnswer] = useState([]);\n  const [userAnswer, setUserAnswer] = useState([]);\n  const [allowPress, setAllowPress] = useState(false);\n  const [points, setPoints] = useState(0);\n\n  const handleGameEnding = msg => {\n    console.log(msg);\n    dispatch(updateHighscore(points));\n    history.replace({\n      pathname: \"/\",\n      lastScore: points\n    });\n  };\n\n  useEffect(() => {\n    const asyncWrap = async () => {\n      await sleep(4000);\n      setGameStarted(true);\n    };\n    asyncWrap();\n  }, []);\n\n  useEffect(() => {\n    if (userAnswer && allowPress) {\n      console.log(\"TIMER STARTED! ANSWER IN 10 SECONDS!\");\n      const timer = setTimeout(() => {\n        handleGameEnding(\"Time ended!\");\n      }, 10000);\n      return () => {\n        console.log(\"CLEARING TIMER\");\n        clearTimeout(timer);\n      };\n    }\n  }, [allowPress, userAnswer]);\n\n  useEffect(() => {\n    const asyncWrap = async () => {\n      if (gameStarted) {\n        console.log(\"GAME STARTED\");\n        let correctAnswers = [];\n        for (let i = 0; i < rounds; i++) {\n          const num = randomNumber();\n          console.log(\"num\", num);\n          setColors(updateArray(colors, true, num));\n          correctAnswers = [...correctAnswers, num];\n          await sleep(delay);\n          setColors([false, false, false, false]);\n          await sleep(50);\n        }\n\n        setColors([false, false, false, false]);\n\n        setCorrectAnswer(correctAnswers);\n        setGameStarted(false);\n      }\n    };\n    asyncWrap();\n  }, [gameStarted]);\n\n  useEffect(() => {\n    if (correctAnswer.length === rounds) {\n      console.log(\"CORRECT ANSWERS HAS BEEN SET! WAIT FOR USER INPUT\");\n      setAllowPress(true);\n    }\n  }, [correctAnswer]);\n\n  useEffect(() => {\n    if (userAnswer && allowPress) {\n      if (userAnswer.length === correctAnswer.length) {\n        for (let i = 0; i < userAnswer.length; i++) {\n          if (userAnswer[i] !== correctAnswer[i]) {\n            handleGameEnding(\"Wrong answer! End the game\");\n          }\n        }\n        console.log(\"EVERYTHING WAS CORRECT! GO TO NEXT ROUND\");\n        setUserAnswer([]);\n        setCorrectAnswer([]);\n        setPoints(rounds);\n        setRounds(rounds + 1);\n        setDelay(delay - 50);\n        setAllowPress(false);\n        setGameStarted(true);\n      } else {\n        for (let i = 0; i < userAnswer.length; i++) {\n          if (userAnswer[i] !== correctAnswer[i]) {\n            handleGameEnding(\"Wrong answer! End the game\");\n          }\n        }\n      }\n    }\n  }, [userAnswer, allowPress]);\n\n  const pressed = async num => {\n    if (allowPress) {\n      console.log(\"user pressed button: \", num);\n      setUserAnswer([...userAnswer, num]);\n    } else {\n      console.log(\"PRESS NOT ALLOWED!\");\n    }\n  };\n\n  return (\n    <div>\n      <h1 style={center}>\n        {gameStarted || allowPress ? \"GAME STARTED\" : \"STARTING IN 3 SECONDS\"}\n      </h1>\n      <div style={buttons}>\n        <Button\n          color=\"blue\"\n          active={colors[0]}\n          onClick={() => {\n            pressed(0);\n          }}\n        />\n        <Button color=\"red\" active={colors[1]} onClick={() => pressed(1)} />\n        <Button color=\"yellow\" active={colors[2]} onClick={() => pressed(2)} />\n        <Button color=\"green\" active={colors[3]} onClick={() => pressed(3)} />\n      </div>\n      <h2 style={center}>\n        {userAnswer && allowPress && \"ANSWER IN 10 SECONDS!\"}\n      </h2>\n      <Score points={points} />\n      <Stop />\n    </div>\n  );\n}\n\nexport default Game;\n","import { UPDATE_HIGHSCORE } from \"../actions/game\";\n\nconst initialState = {\n  highscore: 0\n};\n\nexport default function gameReducer(state = initialState, { type, data }) {\n  switch (type) {\n    case UPDATE_HIGHSCORE:\n      if (state.highscore < data) {\n        return { ...state, highscore: data };\n      }\n      return state;\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\n\n// Reducers\nimport gameReducer from \"./gameReducer\";\n\nconst rootReducer = combineReducers({\n  gameReducer\n});\n\nexport default rootReducer;\n","import { createStore } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nimport rootReducer from \"./reducers/index.js\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nlet store = createStore(persistedReducer);\n\nlet persistor = persistStore(store);\n\n// Clear storage\n//persistor.purge();\n\nexport { store, persistor };\n","import { createBrowserHistory } from \"history\";\n\nexport const history = createBrowserHistory();\n","import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport Start from \"./components/screens/Start/Start.js\";\nimport Game from \"./components/screens/Game/Game.js\";\n\n// Redux\nimport { Provider } from \"react-redux\";\nimport { store, persistor } from \"./logic/redux/index.js\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport { history } from \"./history\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Router history={history}>\n          <Switch>\n            <Route exact path=\"/\" component={Start} />\n            <Route exact path=\"/game\" component={Game} />\n          </Switch>\n        </Router>\n      </PersistGate>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}